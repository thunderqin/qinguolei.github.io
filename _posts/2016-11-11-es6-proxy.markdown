---
layout:     post
title:      "es6 proxy对象 实现vue数据试图双向绑定"
subtitle:   "数据双向绑定"
date:       2016-11-11 12:00:00
author:     "Guolei"
header-img: ""
header-mask: 0.3
catalog:    true
tags:
    - es6
    - Proxy
---

> 之前通过**Object.definProperty**监听数据的读写,
es6提供了一个**Proxy**对象，同样可以实现对数据的监听

## 效果 ***

![](http://www.qinguolei.com/img/in-post/proxy/proxy.gif)

## 回顾ES5

以前实现数据的监听，可以通过Object.definProperty，在set和get中对读写进行处理。

### 具体实现

```js
Object.defineProperty(o, "b", {
	get : function(){ return '新值'+this.bVal; },
    set : function(newValue){ this.bVal = newValue },
    enumerable : true,
    configurable : true
});

```

**enumerable** 是否可被Object.key枚举
**configurable** 是否可配置，注意（默认是false,所以需要第一次就设置为true）
**get** 当读取o.b的值时，会执行get函数
**set** 当给o.b设置新的值是，会执行set函数

### 问题

上面的demo对一个属性（b）进行监听，假如o有3个属性怎么办

也可以这样

```
Object.defineProperty(o, {a:{...}}, {b:{...}},{c:{...}});
```
假如有100个呢！！？

## 救星Proxy

先看个demo
```js
let obj = {name:'guolei',age:23};

let proxy = new Proxy(obj,{
	set(target,property,value){
		target[property] = value
		console.log(`赋值为:${value}`)
		return true
	},
	get(target, key, receiver){
		console.log('取值')
		return target[key]
	}
})
proxy.name  // '取值'' '国雷'
proxy.name = 'qinguolei' // '赋值为qinguolei'
proxy.age  // '取值'' 23
proxy.name = 666  // '赋值为666'

```
proxy是一个Proxy对象,所有的修改通过proxy进行，这样就可以实现对每一个属性的取值和赋值的监听

如果我们在set中对加入对view的控制，不就可以实现数据绑定了吗

## 实现数据绑定




```
<div id="app">
	<p>
		看这里：<span>{{name}}</span>
	</p>
</div>
<div id="input-wrap">
	Val: <input type="text" id="input">
</div>
```

html代码

## 优化

1. 每次修改代码会把模板全部替换掉 应该是局部优化
2. 加上v-model，自动监听输入框oniput事件



代码地址：[github](https://github.com/thunderqin/wx_app_demo_cnode_api)

### 著作权声明


