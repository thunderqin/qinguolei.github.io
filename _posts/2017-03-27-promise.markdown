---
layout:     post
title:      "简单实现pomise"
subtitle:   "探索promise实现原理"
date:       2017-02-28 12:00:00
author:     "Guolei"
header-img: ""
header-mask: 0.3
catalog:    true
tags:
    - promise
---

> promise如何解决回调噩梦，又是如何实现链式回调，抽取核心代码分析一下


## 上代码

```
		function P(fn){
			var events = [];
			// 加入队列 返回自身 支持链式调用
			this.then = function(f){
				events.push(f);
				return this;
			};
			// 从头部剔出 并执行
			function resolve(d){
				var f = events.shift();
				f(d,resolve);
			}
			// 执行构造器函数
			fn(resolve)
		}
		function a(){
			return new P(function(resolve){
				console.log('get....');
				setTimeout(function(){
					resolve('d1') 
				},1000)
			})
		}
		// 执行过程 先依次加入events队列，最后从头到尾依次执行
		a().then(function(d,resolve){
			console.log(d);
			setTimeout(function(){
				resolve('d2')
			},1000)
			
		}).then(function(d){
			console.log(d)
		})
```
## 原理

then的作用就是把回调函数放入一个数组中，然后返回自身（链式调用）
resolve函数的作用，按队列数组的顺序，执行第一个函数，并踢出队列


